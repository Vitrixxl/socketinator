import type {
  BaseWSEntries,
  HandlerStore,
  HandlerStoreWithUserId,
  MessagesOf,
  PayloadOf,
  SocketinatorClientParams,
  WSMessageEntry,
} from "@socketinator/types";
import type { which } from "bun";

export class SocketinatorClient<
  ServerEntries extends WSMessageEntry & BaseWSEntries,
  ClientEntries extends WSMessageEntry,
> {
  private handlerStore: HandlerStore<ClientEntries> = {};
  constructor({ url }: SocketinatorClientParams) {}

  send = <
    Group extends ServerEntries["group"],
    Key extends MessagesOf<ClientEntries, Group>["key"],
  >(
    group: Group,
    key: Key,
    data: PayloadOf<ClientEntries, Group, Key>,
  ) => {};

  on = <
    Group extends ServerEntries["group"],
    Key extends MessagesOf<ServerEntries, Group>["key"],
  >(
    group: Group,
    key: Key,
    callback: (data: PayloadOf<ClientEntries, Group, Key>) => void,
  ) => {
    let groupHandlers = this.handlerStore[group];
    if (!groupHandlers) {
      this.handlerStore[group] = {};
      groupHandlers = this.handlerStore[group];
    }
    if (!groupHandlers[key]) {
      groupHandlers;
    }
    const callbacks = (groupHandlers[key] ??= new Set());
    callbacks.add(callback);
    return () => callbacks.delete(callback);
  };
}
